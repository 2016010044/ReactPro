上一章节主要介绍了准备工作阶段的一些东西。下面将介绍react项目。
1.react项目：
搭建：
create-react-app lkdemo,在这之前应该先安装以下这个create-react-app这个脚手架。
cd lkdemo
npm start
生产的目录该删的删，该增加目录的增加。
api:一般就是调用那个服务器端的一些东西，
components：公共组件
config:配置文件
pages:页面
store：这个就是redux
tools:工具文件目录
剩下一个app.js和index.js

配置：
1）配置react-redux:
yarn add redux  redux-saga  react-redux
redux对应的就是store文件目录：
该文件夹下的文件有：actionCretors.js,actionType.js,index.js,reducer.js,sagas.js(本次项目中没有用到redux，将会单独抽出来讲redux)
2)配置axios:
在api目录下/index.js:
import axios from 'axios'
import {removeUser} from "./adminApi";
import PubSub from 'pubsub-js'
// 请求超时时间
axios.defaults.timeout = 10000;
// post的请求头
axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8';
// 配置请求拦截器
axios.interceptors.request.use((config)=>{
    return config;
}, (error)=>{
    return Promise.error(error);
});
// 配置响应拦截器
axios.interceptors.response.use((response)=>{
    // 过滤
    if(response.status === 200){
        return Promise.resolve(response.data);
    }else {
        return Promise.reject(response.data);
    }

}, (error)=>{
    console.log(error);
});

export  default function ajax(url = '', params = {}, type = 'GET') {
    // 0. 变量
     let promise;

    // 1. 返回promise
    return new Promise((resolve, reject)=>{
         // 1.1 判断请求的类型
        if(type.toUpperCase() === 'GET'){ // get请求
            // 添加随机时间戳, 去除缓存
            params['itlike'] = randomCode(20);
            promise = axios({
                url,
                params
            })
        }else if(type.toUpperCase() === 'POST'){ // post请求
            promise = axios({
                method: 'post',
                url,
                data: params
            })
        }

        //  1.2 处理结果并返回
        promise.then((response)=>{
            // token是否失效
            if(response.status === 2){
                // 清空本地的管理员信息
                removeUser();
                // 发布token失效信息
                PubSub.publish('tokenOut', {});
            }else {
                resolve(response);
            }
        }).catch((error)=>{
            reject(error);
        })
    });
}

/*
  生成指定长度的随机数
*/
function randomCode(length) {
    const chars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];
    let result = '';
    for (let i=0; i<length; i++){
        let index = Math.ceil(Math.random()*9);
        result += chars[index];
    }
    return result;
}
这里的removeUser在后面介绍。

3）配置antd:yarn add antd
但存在问题：无法进行主题配置和不能按需加载
首先yarn add react-app-rewired customize-cra，接着在package.json中配置：
"scripts": {
    "start": "react-scriptsstart",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
替换为
"scripts": {
    "start": "react-app-rewired start",
    "build": "react-app-rewired build",
    "test": "react-app-rewired test",
    "eject": "react-scripts eject"
  },
接着在项目根目录创建一个 config-overrides.js 用于修改默认配置，接着就处理按需加载： yarn add babel-plugin-import
config-overrides.js 文件内容为：
const {override, fixBabelImports} = require('customize-cra');
module.exports = override(
    fixBabelImports('antd', {
        libraryDirectory: 'es',
        style: 'css',
    }),
);

4）配置index.js
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';

// 1. 引入provider组件
import { Provider } from 'react-redux'
import store from './store/index'

import { ConfigProvider } from 'antd';
import zhCN from 'antd/es/locale/zh_CN';

import moment from 'moment';
import 'moment/locale/zh-cn';
moment.locale('zh-cn');

ReactDOM.render(
      <Provider store={store}>
          <ConfigProvider  locale={zhCN}>
              <App />
          </ConfigProvider>
      </Provider>,
  document.getElementById('root')
);
ConfigProvider全局配置中文。

5）配置路由：yarn add react-router-dom
至此配置就告一段落，接下来看一下页面，在App.js中，
import React from 'react';
import {connect} from 'react-redux'
import {HashRouter, Switch, Route} from 'react-router-dom'
import Login from './pages/login/login'
import Admin from './pages/admin/admin'

class App extends React.Component{
    render() {
        return (
           <HashRouter>
               <Switch>
                   <Route path={"/login"} component={Login}/>
                   <Route path={"/"} component={Admin}/>
               </Switch>
           </HashRouter>
        )
    }
}
const mapStateToProps = (state)=>{
   return {

   }
};
const mapDispatchToProps = (dispatch)=>{
    return {

    }
};
export default connect(mapStateToProps, mapDispatchToProps)(App);
这里一个是登录页，一个是主页。这里介绍以下redux的两个组件：Provider connect
使用redux的createStore创建一个store，store作为一个参数传给Provider 组件，这一点在index.js中就展示出来，接着要在App.js中。接着在App.js中使用这个connect组件，这个组件要实现两个方法，mapStateToProps 和mapDispatchToProps ，把指定的state和指定的action和react组件连接起来。

2.登录页面：
上来就是用antd的组件，直接使用一个form组件，当用户输入用户名和密码提交的执行如下代码：
const onFinish = values => {
            console.log('表单提交的数据: ', values);
            // 对密码进行MD5加密
            const hash_pwd = md5(values.password, config.KEY);
            // 处理登录业务
            checkLogin(values.account, hash_pwd).then((result)=>{
                console.log(result);
                if(result && result.status === 1){
                     message.success(result.msg);
                     // 保存用户信息到本地
                    saveUser(result.data);
                    // 跳转到主面板
                    this.props.history.replace('/');
                }else if(result && result.status === 0){
                    message.warning(result.msg);
                }else {
                    message.error('网络出现一点小问题!')
                }
            }).catch((error)=>{
                 message.error('服务器端内部错误!')
            });

        };

checkLogin为登录接口：
router.post('/login', (req, res, next)=>{
    // 1. 获取数据
    const {account, password} = req.body;
    // 2. 判断
    if(!account || !password){
        res.json({
            status: 0,
            msg: '用户名或密码不能为空!'
        });
    }
    // 3. 查询数据库
    let sql = `SELECT * FROM t_admin WHERE account = ? AND password = ?;`;
    let value = [account, password];
    Query(sql, value).then((result)=>{
        if(result.data.length > 0){
            const {id, account, password, account_name, account_icon} = result.data[0];
            //  3.1 生成一个token
            const userData = {id, account, password};
            const token = jwt.sign(userData, KEY);
            // console.log(token);
            // console.log(jwt.verify(token, KEY));

            // 3.2  把token存入session
            req.session.token = token;

            // 3.3 给客户端返回数据
            res.json({
                status: 1,
                msg: '登录成功!',
                data: {
                    token,
                    account,
                    account_name,
                    account_icon
                }
            })

        }else {
            res.json({
                status: 0,
                msg: '当前用户不存在!'
            })
        }
    }).catch((error)=>{
        return next(error);
    })

});
这里需要引入token生成器：const jwt = require('jsonwebtoken');
这里使用token，得需先配置一下session在app.js中。
// 引入session相关的
const session = require('express-session');
const MySQLStore = require('express-mysql-session')(session);
const database = require('./config/config').database;
const sessionStore = new MySQLStore({
    host: database.HOST,
    port: database.PORT,
    user: database.USER,
    password: database.PASSWORD,
    database: database.DATABASE
});

// 使用session
app.use(session({
    key: 'itLike',
    secret: 'itLike',//加密字符串
    resave: true, //强制保存session，即使它没有变化
    saveUninitialized: true,//强制将未初始化的session存储。当新建一个session且未设定属性或值时，它就处于未初始化状态。在设定cookie前，这对于登录验证，减轻服务器存储压力，权限控制是有帮助的，默认为true
     cookie: {maxAge: 24 * 3600 * 1000},
   //  cookie: {maxAge: 1000},
    rolling: true, //在每次请求时进行设置cookie，将重置cookie过期时间
    store: sessionStore
}));
接口最终给客户端返回了数据（包含token），客户端拿到数据存到本地：
saveUser(result.data);
到api/adminApi.js
export const saveUser = (userObj)=>{
     saveObj(config.ADMIN_KEY, userObj);
};
到tools/cache-tool.js:
export const saveObj = (key, obj)=>{
    store.set(key, obj);
};
export const removeObj = (key)=>{
    store.remove(key);
};
export const getObj = (key)=>{
    return store.get(key) || {};
};
这里需要安装以下store来帮助我们存、删、拿。然后通过：this.props.history.replace('/');跳转到主页。

2.主页面：
1）首先就是判断是否本地存在session，若存在，在主页，若不存在，重定向登录页：
 if(!isLogin()){
            return  <Redirect to={"/login"}/>
        }

export const isLogin = ()=>{
    let userObj = getObj(config.ADMIN_KEY);
    return !!userObj.token;
};
2）在admin.jsx中配置订阅消息：
 componentDidMount() {
        // 去订阅token失效信息
        PubSub.subscribe('tokenOut', (msg, data)=>{
            if(msg === 'tokenOut'){
                Modal.warning({
                    title: '登录信息已经失效',
                    content: (
                        <div>
                            <p>请重新登录后再操作!</p>
                        </div>
                    ),
                    onOk:()=>{
                        this.props.history.replace('/login');
                    }
                });

            }
        });
    }

    componentWillUnmount() {
        PubSub.unsubscribe('tokenOut');
    }
这时在配置axios时发布的消息，token失效，就回到登录页。
接着就是配置路由：
 <Layout className="admin-pane">
                {/*左边*/}
                <LeftNav collapsed={this.state.collapsed}/>
                {/*右边*/}
                <Layout>
                    <RightHeader  collapsed={this.state.collapsed} toggle={this.toggle} />
                    <Content className="admin-content">
                        <Switch>
                            <Redirect from={"/"} exact to={"/home"}/>
                            <Route path={"/home"} component={Home} />
                            <Route path={"/resource"} component={Resource} />
                            <Route path={"/lifejob"} component={LifeJob} />
                            <Route path={"/activities"} component={Activities} />
                            <Route path={"/live"} component={Lives} />
                            <Route path={"/setting"} component={Setting} />
                            <Route component={NotFound}/>
                        </Switch>
                    </Content>
                    <Footer className="admin-footer">
                        引擎计划-撩学堂后台管理系统
                    </Footer>
                </Layout>
            </Layout>
分别由左边和右边，右边又分为了上中下，通过路由将内容渲染显示在Content中。
左侧：首先在父组件中传了哥参数给子组件，子组件接收参数的方式：
先import PropTypes from 'prop-types'
static propTypes = {
        collapsed: PropTypes.bool.isRequired
    };
具体代码如下：
class LeftNav extends React.Component{
    state = {
        menuList: menus,
        // 管理员信息
        account_name: getUser().account_name,
        account_icon: getUser().account_icon,
    };

    static propTypes = {
        collapsed: PropTypes.bool.isRequired
    };

    componentDidMount() {
        // 订阅管理员信息更新的信息
        PubSub.subscribe('changeAdminMsg', (msg, data)=>{
             if(msg === 'changeAdminMsg'){
                 this.setState({
                     account_name: getUser().account_name,
                     account_icon: getUser().account_icon
                 })
             }
        });
    }

    /*创建左侧菜单*/
    _renderMenu = (menuList)=>{
        return menuList.map(item => {
            // 取出一级菜单
            if(!item.children){
                return (
                    <Item key={item._key}>
                        <Link to={item._key}>
                            <span className={item.icon} style={this.props.collapsed ? {fontSize: 25} : {}} />
                            <span  style={this.props.collapsed ? {display: 'none'} : {}}>{item.title}</span>
                        </Link>
                    </Item>
                )
            }else {
                return (
                    <SubMenu
                        key={item._key}
                        title={
                            <span>
                                 <span className={item.icon}  style={this.props.collapsed ? {fontSize: 25} : {}} />
                                  <span  style={this.props.collapsed ? {display: 'none'} : {}}>{item.title}</span>
                            </span>
                        }
                    >
                        {this._renderMenu(item.children)}
                    </SubMenu>
                )
            }
        })
    };


    // 根据当前的菜单列表, 依据当前的路由路径, 获取应该被展开的菜单项
    _getOpenKeys = (menuList, path) => {
        for(let i=0; i<menuList.length; i++){
            // 1. 获取配置对象
            let item = menuList[i];
            // 2. 判断
            if(
                item.children &&
                item.children.find(c_item => {return c_item._key ===path})
            ){
                return item._key;
            }
        }
        return  '';
    };

    render() {
        // 获取当前的路由
        // /home/api
        let path = this.props.location.pathname;
        let pPath = path.substr(0, path.indexOf('/', 2)) ? path.substr(0, path.indexOf('/', 2)) :path;
        let openKeys = this._getOpenKeys(this.state.menuList, path);

        const {account_name, account_icon} = this.state;
        return(
            <Sider trigger={null} collapsible  collapsed={this.props.collapsed}>
                <div className="logo">
                    <div className="avatar" style={this.props.collapsed ? {width: 40, height: 40} : {}}>
                        <img src={account_icon ? config.BASE_URL + account_icon : xl} alt=""/>
                    </div>
                    <h4>{account_name ? account_name : '撩学堂管理员'}</h4>
                </div>
                <Menu
                    theme="dark"
                    mode="inline"
                    defaultSelectedKeys={[path]}
                    selectedKeys={[path, pPath]}
                    defaultOpenKeys={[openKeys]}
                >
                    {this._renderMenu(this.state.menuList)}
                </Menu>
            </Sider>
        )
    }
}
这里根据this.props.collapsed的值判断左边是隐藏还是显示。并且头像和用户名直接是从服务器获取的。下面通过menu来创建左侧菜单， defaultSelectedKeys为默认选择，selectedKeys为主动选择的，defaultOpenKeys就是在地址栏中输入子孩子的地址会打开父亲的选择孩子的选中，否则不会打开父亲。state中的menus数据大致是这样：
{
    "id": 6,
    "title": "设置中心",
    "icon": "icon iconfont icon-icon_shezhi",
    "_key": "/setting",
    "prentID": 0,
    "children": [
      {
        "id": 7,
        "title": "账户设置",
        "icon": "icon iconfont icon-fuwudiqiu",
        "_key": "/setting/account",
        "prentID": 6
      },
      {
        "id": 8,
        "title": "会员统计",
        "icon": "icon iconfont icon-shenjing",
        "_key": "/setting/member",
        "prentID": 6
      }
    ]
  }
这儿有一个接收消息，它是管理员修改头像和用户名时发布一个消息，这儿接受到，然后改变头像和用户名。
最后补充一下这个withRouter：
把不是通过路由切换过来的组件中，将react-router 的 history、location、match 三个对象传入props对象上，如果不使用withRouter此组件的this.props为空，没法执行props中的history、location、match等方法。

接下来看一下右边的头部：
这儿的天气接口有问题，所以暂时不用管，同样接收父组件传过来的参数。
class RightHeader extends React.Component{
    static propsTypes = {
        collapsed: PropTypes.bool.isRequired,
        toggle: PropTypes.func.isRequired
    };

    state = {
       // 天气图片
        picURL: '',
       // 天气信息
        notice: ''
    };

    componentDidMount() {
        // 获取当前城市的天气(上海)
        this._weather();
    }

    // 天气预报
    // http://api.map.baidu.com/telematics/v3/weather?location=北京&output=json&ak=6tYzTvGZSOpYB5Oc2YGGOKt8
    _weather(){
        const city = '上海';
        const KEY = 'KnHVOML3NCoHEjn8SsDESlKnGsexhhr7';
        const url = `/baidu_api/weather?location=${city}&output=json&ak=${KEY}`;
        ajax(url).then((data)=>{
            console.log(data);
            if(data.error === 0){
                let result = data.results[0].weather_data[0];
                let picURL = result.nightPictureUrl;
                let notice = result.weather + '  ' + result.temperature;
                // 更新状态
                this.setState({
                    picURL,
                    notice
                });
            }
        }).catch((error)=>{
            console.log(error);
            message.error('网络异常:' + error)
        });

    }

    // 退出登录
    _logout = ()=>{
        confirm({
            title: '确认退出登录吗?',
            icon: <ExclamationCircleOutlined />,
            content: '鱼儿不能忘记水的拥抱, 你确定要走吗?',
            cancelText: '取消',
            okText: '确定',
            onOk:() => {
                checkLogOut().then((result)=>{
                    if(result && result.status === 1){
                        // 清空本地缓存
                        removeUser();
                        message.success(result.msg);
                    }else {
                        // 清空本地缓存
                        removeUser();
                        message.error('服务器内部出现问题!');
                    }
                    // 切换到登录界面
                    this.props.history.replace('/login');
                });
            },
            onCancel() {},
        });
    };

    render() {
        return(
            <Header className="header" style={{ padding: 0 }}>
                {React.createElement(this.props.collapsed ? MenuUnfoldOutlined : MenuFoldOutlined, {
                    className: 'trigger',
                    onClick: this.props.toggle,
                })}
                <div className="navbar-header">
                    <h3 className="navbar-brand">引擎计划-撩学堂后台管理系统</h3>
                   <div className="navbar-header-right">
                       <img src={this.state.picURL} alt=""/>
                       <span>{this.state.notice}</span>
                       <Button type="danger" className="exit-btn" onClick={()=>this._logout()}>退出</Button>
                   </div>
                </div>
            </Header>
        )
    }
}
接收参数后，会创建一个元素，通过这个元素控制左拉和右拉。通过点击按钮来切换图标（这点不得不为antd竖起大拇指，反正我觉得是很厉害。）
接着就是退出系统：
// 退出登录
router.get('/logout', (req, res, next)=>{
    // 方式1
    // req.session.cookie.maxAge = 0;
    // 方式二
    req.session.destroy();
    res.json({
        status: 1,
        msg: '退出登录成功!'
    });
});
总的来说，就是通过左边来切换路由，然后找到路由，将对应的内容渲染到右边的content中，




















